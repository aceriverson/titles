version: '3.8'

services:
  polygons_api:
    build:
      context: .
      dockerfile: polygons_api/Dockerfile
    depends_on:
      - postgres
    env_file:
      - .env

  webhook:
    build:
      context: ./webhook
      dockerfile: Dockerfile
    depends_on:
      - postgres
    env_file:
      - .env

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - frontend_build:/app/dist
    command: sh -c "npm install && npm run build"

  polygons:
    build:
      context: ./polygons
      dockerfile: Dockerfile
    volumes:
      - polygons_build:/app/build
    env_file:
      - .env
    command: sh -c "npm install && npm run build && cp -r public/* build/"

  postgres:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/schema.sql:/docker-entrypoint-initdb.d/schema.sql

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  caddy:
    image: caddy:latest
    ports:
      - "8080:80"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - frontend_build:/srv/frontend
      - polygons_build:/srv/polygons
    depends_on:
      - polygons_api
      - webhook
      - frontend
      - polygons

volumes:
  postgres_data:
  redis_data:
  polygons_build:
  frontend_build:
